{"version":3,"file":"index.js","sources":["../src/logger.ts","../src/rest/openAIClient.ts","../src/rest/isUnexpected.ts","../src/api/OpenAIContext.ts","../src/api/operations.ts","../src/api/getStream.ts","../src/api/sse.ts","../src/OpenAIClient.ts","../src/OpenAIKeyCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"openai\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"../logger.js\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { OpenAIContext } from \"./clientDefinitions.js\";\n\n/**\n * Initialize a new instance of `OpenAIContext`\n * @param endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://westus.api.cognitive.microsoft.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credentials: TokenCredential | KeyCredential,\n  options: ClientOptions = {}\n): OpenAIContext {\n  const baseUrl = options.baseUrl ?? `${endpoint}/openai`;\n  options.apiVersion = options.apiVersion ?? \"2023-03-15-preview\";\n  options = {\n    credentials: {\n      scopes: [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: \"api-key\",\n    },\n    ...options,\n  };\n\n  const userAgentInfo = `azsdk-js-openai-rest/1.0.0-beta.2`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n  };\n\n  const client = getClient(baseUrl, credentials, options) as OpenAIContext;\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"POST /deployments/{deploymentId}/embeddings\": [\"200\"],\n  \"POST /deployments/{deploymentId}/completions\": [\"200\"],\n  \"POST /deployments/{deploymentId}/chat/completions\": [\"200\"],\n};\n\nexport function isUnexpected(\n  response: GetEmbeddings200Response | GetEmbeddingsDefaultResponse\n): response is GetEmbeddingsDefaultResponse;\nexport function isUnexpected(\n  response: GetCompletions200Response | GetCompletionsDefaultResponse\n): response is GetCompletionsDefaultResponse;\nexport function isUnexpected(\n  response: GetChatCompletions200Response | GetChatCompletionsDefaultResponse\n): response is GetChatCompletionsDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetEmbeddings200Response\n    | GetEmbeddingsDefaultResponse\n    | GetCompletions200Response\n    | GetCompletionsDefaultResponse\n    | GetChatCompletions200Response\n    | GetChatCompletionsDefaultResponse\n): response is\n  | GetEmbeddingsDefaultResponse\n  | GetCompletionsDefaultResponse\n  | GetChatCompletionsDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {\n      if (candidateParts[i]?.startsWith(\"{\") && candidateParts[i]?.indexOf(\"}\") !== -1) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(`${candidateParts[i]?.slice(start, end)}`).test(\n          pathParts[j] || \"\"\n        );\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OpenAIContext } from \"../rest/index.js\";\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport getClient from \"../rest/index.js\";\n\nexport { OpenAIContext } from \"../rest/index.js\";\n\nexport interface OpenAIClientOptions extends ClientOptions {}\n\n/** Azure OpenAI APIs for completions and search */\nexport function createOpenAI(\n  endpoint: string,\n  credential: KeyCredential | TokenCredential,\n  options: OpenAIClientOptions = {}\n): OpenAIContext {\n  const baseUrl = endpoint;\n  const clientContext = getClient(baseUrl, credential, options);\n  return clientContext;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { RequestOptions } from \"../common/interfaces.js\";\nimport {\n  ChatChoiceOutput,\n  ChoiceOutput,\n  OpenAIContext as Client,\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetCompletions200Response,\n  GetCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  isUnexpected,\n} from \"../rest/index.js\";\nimport { ChatCompletions, ChatMessage, Completions, Embeddings } from \"./models.js\";\n\nexport interface GetEmbeddingsOptions extends RequestOptions {\n  /**\n   * An identifier for the caller or end user of the operation. This may be used for tracking\n   * or rate-limiting purposes.\n   */\n  user?: string;\n  /**\n   * The model name to provide as part of this embeddings request.\n   * Not applicable to Azure OpenAI, where deployment information should be included in the Azure\n   * resource URI that's connected to.\n   */\n  model?: string;\n}\n\nexport interface GetCompletionsOptions extends RequestOptions {\n  /** The maximum number of tokens to generate. */\n  maxTokens?: number;\n  /**\n   * The sampling temperature to use that controls the apparent creativity of generated completions.\n   * Higher values will make output more random while lower values will make results more focused\n   * and deterministic.\n   * It is not recommended to modify temperature and top_p for the same completions request as the\n   * interaction of these two settings is difficult to predict.\n   */\n  temperature?: number;\n  /**\n   * An alternative to sampling with temperature called nucleus sampling. This value causes the\n   * model to consider the results of tokens with the provided probability mass. As an example, a\n   * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be\n   * considered.\n   * It is not recommended to modify temperature and top_p for the same completions request as the\n   * interaction of these two settings is difficult to predict.\n   */\n  topP?: number;\n  /**\n   * A map between GPT token IDs and bias scores that influences the probability of specific tokens\n   * appearing in a completions response. Token IDs are computed via external tokenizer tools, while\n   * bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding to\n   * a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias\n   * score varies by model.\n   */\n  logitBias?: Record<string, number>;\n  /**\n   * An identifier for the caller or end user of the operation. This may be used for tracking\n   * or rate-limiting purposes.\n   */\n  user?: string;\n  /**\n   * The number of completions choices that should be generated per provided prompt as part of an\n   * overall completions response.\n   * Because this setting can generate many completions, it may quickly consume your token quota.\n   * Use carefully and ensure reasonable settings for max_tokens and stop.\n   */\n  n?: number;\n  /**\n   * A value that controls the emission of log probabilities for the provided number of most likely\n   * tokens within a completions response.\n   */\n  logprobs?: number;\n  /**\n   * A value specifying whether completions responses should include input prompts as prefixes to\n   * their generated output.\n   */\n  echo?: boolean;\n  /** A collection of textual sequences that will end completions generation. */\n  stop?: string[];\n  /**\n   * A value that influences the probability of generated tokens appearing based on their existing\n   * presence in generated text.\n   * Positive values will make tokens less likely to appear when they already exist and increase the\n   * model's likelihood to output new topics.\n   */\n  presencePenalty?: number;\n  /**\n   * A value that influences the probability of generated tokens appearing based on their cumulative\n   * frequency in generated text.\n   * Positive values will make tokens less likely to appear as their frequency increases and\n   * decrease the likelihood of the model repeating the same statements verbatim.\n   */\n  frequencyPenalty?: number;\n  /**\n   * A value that controls how many completions will be internally generated prior to response\n   * formulation.\n   * When used together with n, best_of controls the number of candidate completions and must be\n   * greater than n.\n   * Because this setting can generate many completions, it may quickly consume your token quota.\n   * Use carefully and ensure reasonable settings for max_tokens and stop.\n   */\n  bestOf?: number;\n  /** A value indicating whether chat completions should be streamed for this request. */\n  stream?: boolean;\n  /**\n   * The model name to provide as part of this completions request.\n   * Not applicable to Azure OpenAI, where deployment information should be included in the Azure\n   * resource URI that's connected to.\n   */\n  model?: string;\n}\n\nexport interface GetChatCompletionsOptions extends RequestOptions {\n  /** The maximum number of tokens to generate. */\n  maxTokens?: number;\n  /**\n   * The sampling temperature to use that controls the apparent creativity of generated completions.\n   * Higher values will make output more random while lower values will make results more focused\n   * and deterministic.\n   * It is not recommended to modify temperature and top_p for the same completions request as the\n   * interaction of these two settings is difficult to predict.\n   */\n  temperature?: number;\n  /**\n   * An alternative to sampling with temperature called nucleus sampling. This value causes the\n   * model to consider the results of tokens with the provided probability mass. As an example, a\n   * value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be\n   * considered.\n   * It is not recommended to modify temperature and top_p for the same completions request as the\n   * interaction of these two settings is difficult to predict.\n   */\n  topP?: number;\n  /**\n   * A map between GPT token IDs and bias scores that influences the probability of specific tokens\n   * appearing in a completions response. Token IDs are computed via external tokenizer tools, while\n   * bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding to\n   * a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias\n   * score varies by model.\n   */\n  logitBias?: Record<string, number>;\n  /**\n   * An identifier for the caller or end user of the operation. This may be used for tracking\n   * or rate-limiting purposes.\n   */\n  user?: string;\n  /**\n   * The number of chat completions choices that should be generated for a chat completions\n   * response.\n   * Because this setting can generate many completions, it may quickly consume your token quota.\n   * Use carefully and ensure reasonable settings for max_tokens and stop.\n   */\n  n?: number;\n  /** A collection of textual sequences that will end completions generation. */\n  stop?: string[];\n  /**\n   * A value that influences the probability of generated tokens appearing based on their existing\n   * presence in generated text.\n   * Positive values will make tokens less likely to appear when they already exist and increase the\n   * model's likelihood to output new topics.\n   */\n  presencePenalty?: number;\n  /**\n   * A value that influences the probability of generated tokens appearing based on their cumulative\n   * frequency in generated text.\n   * Positive values will make tokens less likely to appear as their frequency increases and\n   * decrease the likelihood of the model repeating the same statements verbatim.\n   */\n  frequencyPenalty?: number;\n  /** A value indicating whether chat completions should be streamed for this request. */\n  stream?: boolean;\n  /**\n   * The model name to provide as part of this completions request.\n   * Not applicable to Azure OpenAI, where deployment information should be included in the Azure\n   * resource URI that's connected to.\n   */\n  model?: string;\n}\n\nexport function _getEmbeddingsSend(\n  context: Client,\n  input: string | string[],\n  deploymentId: string,\n  options: GetEmbeddingsOptions = { requestOptions: {} }\n): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/embeddings\", deploymentId).post({\n    allowInsecureConnection: options.requestOptions?.allowInsecureConnection,\n    skipUrlEncoding: options.requestOptions?.skipUrlEncoding,\n    headers: { ...options.requestOptions?.headers },\n    body: { user: options?.user, model: options?.model, input: input },\n  });\n}\n\nexport async function _getEmbeddingsDeserialize(\n  result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse\n): Promise<Embeddings> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    data: (result.body[\"data\"] ?? []).map((p) => ({\n      embedding: p[\"embedding\"],\n      index: p[\"index\"],\n    })),\n    usage: {\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/** Return the embeddings for a given prompt. */\nexport async function getEmbeddings(\n  context: Client,\n  input: string | string[],\n  deploymentId: string,\n  options: GetEmbeddingsOptions = { requestOptions: {} }\n): Promise<Embeddings> {\n  const result = await _getEmbeddingsSend(context, input, deploymentId, options);\n  return _getEmbeddingsDeserialize(result);\n}\n\nexport function _getCompletionsSend(\n  context: Client,\n  prompt: string[],\n  deploymentId: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/completions\", deploymentId).post({\n    allowInsecureConnection: options.requestOptions?.allowInsecureConnection,\n    skipUrlEncoding: options.requestOptions?.skipUrlEncoding,\n    headers: { ...options.requestOptions?.headers },\n    body: {\n      prompt: prompt,\n      max_tokens: options?.maxTokens,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      logit_bias: options?.logitBias,\n      user: options?.user,\n      n: options?.n,\n      logprobs: options?.logprobs,\n      echo: options?.echo,\n      stop: options?.stop,\n      presence_penalty: options?.presencePenalty,\n      frequency_penalty: options?.frequencyPenalty,\n      best_of: options?.bestOf,\n      stream: options?.stream,\n      model: options?.model,\n    },\n  });\n}\n\nexport async function _getCompletionsDeserialize(\n  result: GetCompletions200Response | GetCompletionsDefaultResponse\n): Promise<Completions> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: result.body[\"created\"],\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      text: p[\"text\"],\n      index: p[\"index\"],\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/**\n * Gets completions for the provided input prompts.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getCompletions(\n  context: Client,\n  prompt: string[],\n  deploymentId: string,\n  options: GetCompletionsOptions = { requestOptions: {} }\n): Promise<Completions> {\n  const result = await _getCompletionsSend(context, prompt, deploymentId, options);\n  return _getCompletionsDeserialize(result);\n}\n\nexport function _getChatCompletionsSend(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse> {\n  return context.path(\"/deployments/{deploymentId}/chat/completions\", deploymentId).post({\n    allowInsecureConnection: options.requestOptions?.allowInsecureConnection,\n    skipUrlEncoding: options.requestOptions?.skipUrlEncoding,\n    headers: { ...options.requestOptions?.headers },\n    body: {\n      messages: messages,\n      max_tokens: options?.maxTokens,\n      temperature: options?.temperature,\n      top_p: options?.topP,\n      logit_bias: options?.logitBias,\n      user: options?.user,\n      n: options?.n,\n      stop: options?.stop,\n      presence_penalty: options?.presencePenalty,\n      frequency_penalty: options?.frequencyPenalty,\n      stream: options?.stream,\n      model: options?.model,\n    },\n  });\n}\n\nexport async function _getChatCompletionsDeserialize(\n  result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse\n): Promise<ChatCompletions> {\n  if (isUnexpected(result)) {\n    throw result.body;\n  }\n\n  return {\n    id: result.body[\"id\"],\n    created: result.body[\"created\"],\n    choices: (result.body[\"choices\"] ?? []).map((p) => ({\n      message: !p.message\n        ? undefined\n        : { role: p.message?.[\"role\"], content: p.message?.[\"content\"] },\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      delta: !p.delta ? undefined : { role: p.delta?.[\"role\"], content: p.delta?.[\"content\"] },\n    })),\n    usage: {\n      completionTokens: result.body.usage[\"completion_tokens\"],\n      promptTokens: result.body.usage[\"prompt_tokens\"],\n      totalTokens: result.body.usage[\"total_tokens\"],\n    },\n  };\n}\n\n/**\n * Gets chat completions for the provided chat messages.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport async function getChatCompletions(\n  context: Client,\n  messages: ChatMessage[],\n  deploymentId: string,\n  options: GetChatCompletionsOptions = { requestOptions: {} }\n): Promise<ChatCompletions> {\n  const result = await _getChatCompletionsSend(context, messages, deploymentId, options);\n  return _getChatCompletionsDeserialize(result);\n}\n\nexport function getCompletionsResult(body: Record<string, any>): Omit<Completions, \"usage\"> {\n  return {\n    id: body[\"id\"],\n    created: body[\"created\"],\n    choices: (body[\"choices\"] ?? []).map((p: ChoiceOutput) => ({\n      text: p[\"text\"],\n      index: p[\"index\"],\n      logprobs:\n        p.logprobs === null\n          ? null\n          : {\n              tokens: p.logprobs[\"tokens\"],\n              tokenLogprobs: p.logprobs[\"token_logprobs\"],\n              topLogprobs: p.logprobs[\"top_logprobs\"],\n              textOffset: p.logprobs[\"text_offset\"],\n            },\n      finishReason: p[\"finish_reason\"],\n    })),\n  };\n}\n\nexport function getChatCompletionsResult(\n  body: Record<string, any>\n): Omit<ChatCompletions, \"usage\"> {\n  return {\n    id: body[\"id\"],\n    created: body[\"created\"],\n    choices: (body[\"choices\"] ?? []).map((p: ChatChoiceOutput) => ({\n      message: !p.message\n        ? undefined\n        : { role: p.message?.[\"role\"], content: p.message?.[\"content\"] },\n      index: p[\"index\"],\n      finishReason: p[\"finish_reason\"],\n      delta: !p.delta ? undefined : { role: p.delta?.[\"role\"], content: p.delta?.[\"content\"] },\n    })),\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\n\nexport async function* getStream<TResponse>(\n  response: StreamableMethod<TResponse>\n): AsyncIterable<string> {\n  const stream = (await response.asNodeStream()).body;\n  if (!stream) throw new Error(\"No stream found in response. Did you enable the stream option?\");\n  for await (const chunk of stream) {\n    yield chunk.toString();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { getStream } from \"./getStream.js\";\n\nexport async function getSSEs<TResponse, TEvent>(\n  response: StreamableMethod<TResponse>,\n  toEvent: (obj: Record<string, any>) => TEvent\n): Promise<AsyncIterable<TEvent>> {\n  const stream = getStream(response);\n  let prevLineIfIncomplete = \"\";\n  let started = false;\n  return streamToEvents(stream, (chunk) => {\n    if (!chunk.startsWith(\"data: \") && !started) {\n      throw new Error(chunk);\n    }\n    started = true;\n    const events: TEvent[] = [];\n    for (let str of chunk.split(\"\\n\\n\")) {\n      if (str.startsWith(\"data: \")) {\n        str = str.slice(6);\n      }\n      if ([\"\", \"[DONE]\", \"[DONE]\\n\"].includes(str)) {\n        return events;\n      }\n      try {\n        const event = JSON.parse(prevLineIfIncomplete + str);\n        prevLineIfIncomplete = \"\";\n        events.push(toEvent(event));\n      } catch (e) {\n        prevLineIfIncomplete += str;\n      }\n    }\n    return events;\n  });\n}\n\nasync function* streamToEvents<T>(\n  stream: AsyncIterable<string>,\n  processChunk: (chunk: string) => T[]\n): AsyncIterable<T> {\n  for await (const chunk of stream) {\n    yield* processChunk(chunk);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ClientOptions } from \"@azure-rest/core-client\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  ChatCompletions,\n  ChatMessage,\n  Completions,\n  Embeddings,\n  GetChatCompletionsOptions,\n  GetCompletionsOptions,\n  GetEmbeddingsOptions,\n  OpenAIClientOptions,\n  OpenAIContext,\n  createOpenAI,\n  getChatCompletions,\n  getCompletions,\n  getEmbeddings,\n} from \"./api/index.js\";\nimport {\n  _getChatCompletionsSend,\n  _getCompletionsSend,\n  getChatCompletionsResult,\n  getCompletionsResult,\n} from \"./api/operations.js\";\nimport { getSSEs } from \"./api/sse.js\";\n\nexport { OpenAIClientOptions } from \"./api/OpenAIContext.js\";\n\n/**\n * A client for interacting with Azure OpenAI.\n *\n * The client needs the endpoint of an OpenAI resource and an authentication\n * method such as an API key or token. The API key and endpoint can be found in\n * the OpenAI resource page. They will be located in the resource's Keys and Endpoint page.\n *\n * ### Examples for authentication:\n *\n * #### API Key\n *\n * ```js\n * import { OpenAIClient } from \"@azure/openai\";\n * import { AzureKeyCredential } from \"@azure/core-auth\";\n *\n * const endpoint = \"<azure endpoint>\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new OpenAIClient(endpoint, credential);\n * ```\n *\n * #### Azure Active Directory\n *\n * ```js\n * import { OpenAIClient } from \"@azure/openai\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"<azure endpoint>\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new OpenAIClient(endpoint, credential);\n * ```\n */\nexport class OpenAIClient {\n  private _client: OpenAIContext;\n  private _isAzure = false;\n\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A key credential used to authenticate to an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   This constructor initializes an OpenAIClient object that can only be used with Azure OpenAI resources.\n   *   To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with an Azure OpenAI resource.\n   * @param endpoint - The URI for an Azure OpenAI resource, including protocol and hostname.\n   *                 For example: https://my-resource.openai.azure.com.\n   * @param credential - A token credential used to authenticate with an Azure OpenAI resource.\n   * @param options - The options for configuring the client.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: OpenAIClientOptions);\n  /**\n   * Initializes an instance of OpenAIClient for use with the non-Azure OpenAI endpoint.\n   * @param openAiApiKey - The API key to use when connecting to the non-Azure OpenAI endpoint.\n   * @param options - The options for configuring the client.\n   * @remarks\n   *   OpenAIClient objects initialized with this constructor can only be used with the non-Azure OpenAI inference endpoint.\n   *   To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.\n   */\n  constructor(openAiApiKey: KeyCredential, options?: OpenAIClientOptions);\n  constructor(\n    endpointOrOpenAiKey: string | KeyCredential,\n    credOrOptions: KeyCredential | TokenCredential | ClientOptions = {},\n    options: ClientOptions = {}\n  ) {\n    let opts: ClientOptions;\n    let endpoint: string;\n    let cred: KeyCredential | TokenCredential;\n    if (isCred(credOrOptions)) {\n      endpoint = endpointOrOpenAiKey as string;\n      cred = credOrOptions;\n      opts = options;\n      this._isAzure = true;\n    } else {\n      endpoint = createOpenAIEndpoint(1);\n      cred = endpointOrOpenAiKey as KeyCredential;\n      const { credentials, ...restOpts } = credOrOptions;\n      opts = {\n        credentials: {\n          apiKeyHeaderName: credentials?.apiKeyHeaderName ?? \"Authorization\",\n          scopes: credentials?.scopes,\n        },\n        ...restOpts,\n      };\n    }\n\n    this._client = createOpenAI(endpoint, cred, {\n      ...opts,\n      ...(this._isAzure\n        ? {}\n        : {\n            additionalPolicies: [\n              ...(opts.additionalPolicies ?? []),\n              {\n                position: \"perCall\",\n                policy: {\n                  name: \"openAiEndpoint\",\n                  sendRequest: (request, next) => {\n                    const obj = new URL(request.url);\n                    const parts = obj.pathname.split(\"/\");\n                    obj.pathname = `/${parts[1]}/${parts.slice(5).join(\"/\")}`;\n                    obj.searchParams.delete(\"api-version\");\n                    request.url = obj.toString();\n                    return next(request);\n                  },\n                },\n              },\n            ],\n          }),\n    });\n  }\n\n  /**\n   * Returns textual completions as configured for a given prompt.\n   * @param deploymentOrModelName - Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The options for this completions request.\n   * @returns The completions for the given prompt.\n   */\n  getCompletions(\n    deploymentOrModelName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = { requestOptions: {} }\n  ): Promise<Completions> {\n    this.setModel(deploymentOrModelName, options);\n    return getCompletions(this._client, prompt, deploymentOrModelName, options);\n  }\n\n  /**\n   * Lists the completions tokens as they become available for a given prompt.\n   * @param deploymentOrModelName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The completions options for this completions request.\n   * @returns An asynchronous iterable of completions tokens.\n   */\n  /**\n   * Lists the completions tokens as they become available for a given prompt.\n   * @param deploymentOrModelName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param prompt - The prompt to use for this request.\n   * @param options - The completions options for this completions request.\n   * @returns An asynchronous iterable of completions tokens.\n   */\n  listCompletions(\n    deploymentOrModelName: string,\n    prompt: string[],\n    options: GetCompletionsOptions = {}\n  ): Promise<AsyncIterable<Omit<Completions, \"usage\">>> {\n    this.setModel(deploymentOrModelName, options);\n    const response = _getCompletionsSend(this._client, prompt, deploymentOrModelName, {\n      ...options,\n      stream: true,\n    });\n    return getSSEs(response, getCompletionsResult);\n  }\n\n  /**\n   * Return the computed embeddings for a given prompt.\n   * @param deploymentOrModelName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param input - The prompt to use for this request.\n   * @param options - The embeddings options for this embeddings request.\n   * @returns The embeddings for the given prompt.\n   */\n  getEmbeddings(\n    deploymentOrModelName: string,\n    input: string[],\n    options: GetEmbeddingsOptions = { requestOptions: {} }\n  ): Promise<Embeddings> {\n    this.setModel(deploymentOrModelName, options);\n    return getEmbeddings(this._client, input, deploymentOrModelName, options);\n  }\n\n  /**\n   * Get chat completions for provided chat context messages.\n   * @param deploymentOrModelName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this completions request.\n   * @returns The chat completions for the given chat context messages.\n   */\n  getChatCompletions(\n    deploymentOrModelName: string,\n    messages: ChatMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} }\n  ): Promise<ChatCompletions> {\n    this.setModel(deploymentOrModelName, options);\n    return getChatCompletions(this._client, messages, deploymentOrModelName, options);\n  }\n\n  /**\n   * Lists the chat completions tokens as they become available for a chat context.\n   * @param deploymentOrModelName - The name of the model deployment (when using Azure OpenAI) or model name (when using non-Azure OpenAI) to use for this request.\n   * @param messages - The chat context messages to use for this request.\n   * @param options - The chat completions options for this chat completions request.\n   * @returns An asynchronous iterable of chat completions tokens.\n   */\n  listChatCompletions(\n    deploymentOrModelName: string,\n    messages: ChatMessage[],\n    options: GetChatCompletionsOptions = { requestOptions: {} }\n  ): Promise<AsyncIterable<Omit<ChatCompletions, \"usage\">>> {\n    this.setModel(deploymentOrModelName, options);\n    const response = _getChatCompletionsSend(this._client, messages, deploymentOrModelName, {\n      ...options,\n      stream: true,\n    });\n    return getSSEs(response, getChatCompletionsResult);\n  }\n\n  private setModel(model: string, options: { model?: string }): void {\n    if (!this._isAzure) {\n      options.model = model;\n    }\n  }\n}\n\nfunction createOpenAIEndpoint(version: number): string {\n  return `https://api.openai.com/v${version}`;\n}\n\nfunction isCred(cred: Record<string, any>): cred is TokenCredential | KeyCredential {\n  return isTokenCredential(cred) || cred.key !== undefined;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\n\n/**\n * The OpenAIKeyCredential class represents an OpenAI API key\n * and is used to authenticate into an OpenAI client for\n * an OpenAI endpoint.\n */\nexport class OpenAIKeyCredential implements KeyCredential {\n  private _key: string;\n\n  /**\n   * Create an instance of an AzureKeyCredential for use\n   * with a service client.\n   *\n   * @param key - The initial value of the key to use in authentication\n   */\n  constructor(key: string) {\n    if (!key) {\n      throw new Error(\"key must be a non-empty string\");\n    }\n\n    this._key = createKey(key);\n  }\n\n  /**\n   * The value of the key to be used in authentication\n   */\n  public get key(): string {\n    return this._key;\n  }\n\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  /**\n   * Change the value of the key.\n   *\n   * Updates will take effect upon the next request after\n   * updating the key value.\n   *\n   * @param newKey - The new key value to be used\n   */\n  public update(newKey: string): void {\n    this._key = createKey(newKey);\n  }\n}\n\nfunction createKey(key: string): string {\n  return key.startsWith(\"Bearer \") ? key : `Bearer ${key}`;\n}\n"],"names":["createClientLogger","getClient","__await","__asyncValues","__asyncDelegator","__rest","isTokenCredential"],"mappings":"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"}